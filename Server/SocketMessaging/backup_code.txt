socket.on('message',function(data){	
		var sockets = io.sockets.sockets;
		// sockets.forEach(function(soc){
		// 	if(soc.id != socket.id){
		// 		soc.emit('message',data);
		// 	}
		// })
		// console.log(data.text + " ,from:= "+socket.id);
		socket.broadcast.emit('message',data);
		// socket.emit('message',data);
	});




	function test(){
        for(var i=0;i<users_list.length;i++){
            console.log("printing");
            console.log(users_list[i]);
        }
	}

	setTimeout(test,1000);


//		users_list.push(JSON.parse(data));
//		console.log(users_list[user.email]);



	// sending to sender-client only
     socket.emit('message', "this is a test");

     // sending to all clients, include sender
     io.emit('message', "this is a test");

     // sending to all clients except sender
     socket.broadcast.emit('message', "this is a test");

     // sending to all clients in 'game' room(channel) except sender
     socket.broadcast.to('game').emit('message', 'nice game');

     // sending to all clients in 'game' room(channel), include sender
     io.in('game').emit('message', 'cool game');

     // sending to sender client, only if they are in 'game' room(channel)
     socket.to('game').emit('message', 'enjoy the game');

     // sending to all clients in namespace 'myNamespace', include sender
     io.of('myNamespace').emit('message', 'gg');

     // sending to individual socketid
     socket.broadcast.to(socketid).emit('message', 'for your eyes only');

     //sending to individual socket(User)
     io.sockets.connected[socket.id].emit('message','yo');



     The easiest way rather than sending directly to the socket, would be creating a room for the 2 users to use and just send messages freely in there.

     socket.join('some-unique-room-name'); // Do this for both users you want to chat with each other
     socket.broadcast.to('the-unique-room-name').emit('message', 'blah'); // Send a message to the chat room.
     Otherwise, you're going to need to keep track of each individual clients socket connection, and when you want to chat you'll have to look up that sockets connection and emit specifically to that one using the function I said above. Rooms are probably easier.




//	    console.log(users_list[0]['yashesh@gmail.com']['socket_id']);
		for(var i=0;i<users_list.length;i++){
		    io.sockets.connected[users_list[JSON.parse(data).to]].emit('privateMessageGet',{"text":JSON.parse(data).message});
//            socket.broadcast.to(users_list[i][JSON.parse(data).to].socket_id).emit('privateMessageGet',{"text":JSON.parse(data).message});
		}



		var app = require('express')();
        var server = require('http').Server(app);
        var io = require('socket.io')(server,{
            pingInterval:10000,
            pingTimeout:5000,
        });

        server.listen(3000);


        var users_list = [];

        server.listen(3000,function(){
        	console.log("Yep Running");
        })

        app.get('/',function(req,res){
        	res.sendFile(__dirname+'/index.html');
        })

        io.on('connection',function(socket){
            socket.emit('connected',{"info":socket.id});

            socket.on('connectedDone',function(data){
                console.log("Yo Connected "+socket.id);
        	    var user = JSON.parse(data);
        	    users_list[user.email] = user.socket_id;
        	    allListenersAndEmitters(socket);
        	});
        })


        function allListenersAndEmitters(socket){

        	socket.on('privateMessageEmit',function(data){
        	    if(typeof users_list[JSON.parse(data).to] === 'undefined'){
        	        console.log("User Offline Message Queued");
        	    }else{
        	        io.sockets.connected[users_list[JSON.parse(data).to]].emit('privateMessageGet',{"text":JSON.parse(data).message});
        	    }

        	});

            socket.on('groupMessage',function(data){
                socket.broadcast.emit('groupMessage',data);
            });


        	socket.on('disconnect',function(){
        		var index = users_list.indexOf(socket.id);
                if (index !== -1) users_list.splice(index, 1);
        		console.log("user removed " + socket.id);
        	});

        	socket.on('heartbeat',function(data){
        		console.log("beating");
        	});

        	function sendHeartBeat(){
        		setTimeout(sendHeartBeat,20000);
        	    socket.emit('ping', { beat : 1 });
        	}

        	setTimeout(sendHeartBeat,20000);

        }



        var socket = io.connect('http://localhost:3000',{'reconnection': false,'reconnectionDelay': 500,'reconnectionAttempts': 10});
