socket.on('message',function(data){	
		var sockets = io.sockets.sockets;
		// sockets.forEach(function(soc){
		// 	if(soc.id != socket.id){
		// 		soc.emit('message',data);
		// 	}
		// })
		// console.log(data.text + " ,from:= "+socket.id);
		socket.broadcast.emit('message',data);
		// socket.emit('message',data);
	});




	function test(){
        for(var i=0;i<users_list.length;i++){
            console.log("printing");
            console.log(users_list[i]);
        }
	}

	setTimeout(test,1000);


//		users_list.push(JSON.parse(data));
//		console.log(users_list[user.email]);



	// sending to sender-client only
     socket.emit('message', "this is a test");

     // sending to all clients, include sender
     io.emit('message', "this is a test");

     // sending to all clients except sender
     socket.broadcast.emit('message', "this is a test");

     // sending to all clients in 'game' room(channel) except sender
     socket.broadcast.to('game').emit('message', 'nice game');

     // sending to all clients in 'game' room(channel), include sender
     io.in('game').emit('message', 'cool game');

     // sending to sender client, only if they are in 'game' room(channel)
     socket.to('game').emit('message', 'enjoy the game');

     // sending to all clients in namespace 'myNamespace', include sender
     io.of('myNamespace').emit('message', 'gg');

     // sending to individual socketid
     socket.broadcast.to(socketid).emit('message', 'for your eyes only');

     //sending to individual socket(User)
     io.sockets.connected[socket.id].emit('message','yo');



     The easiest way rather than sending directly to the socket, would be creating a room for the 2 users to use and just send messages freely in there.

     socket.join('some-unique-room-name'); // Do this for both users you want to chat with each other
     socket.broadcast.to('the-unique-room-name').emit('message', 'blah'); // Send a message to the chat room.
     Otherwise, you're going to need to keep track of each individual clients socket connection, and when you want to chat you'll have to look up that sockets connection and emit specifically to that one using the function I said above. Rooms are probably easier.




//	    console.log(users_list[0]['yashesh@gmail.com']['socket_id']);
		for(var i=0;i<users_list.length;i++){
		    io.sockets.connected[users_list[JSON.parse(data).to]].emit('privateMessageGet',{"text":JSON.parse(data).message});
//            socket.broadcast.to(users_list[i][JSON.parse(data).to].socket_id).emit('privateMessageGet',{"text":JSON.parse(data).message});
		}



		var app = require('express')();
        var server = require('http').Server(app);
        var io = require('socket.io')(server,{
            pingInterval:10000,
            pingTimeout:5000,
        });

        server.listen(3000);


        var users_list = [];

        server.listen(3000,function(){
        	console.log("Yep Running");
        })

        app.get('/',function(req,res){
        	res.sendFile(__dirname+'/index.html');
        })

        io.on('connection',function(socket){
            socket.emit('connected',{"info":socket.id});

            socket.on('connectedDone',function(data){
                console.log("Yo Connected "+socket.id);
        	    var user = JSON.parse(data);
        	    users_list[user.email] = user.socket_id;
        	    allListenersAndEmitters(socket);
        	});
        })


        function allListenersAndEmitters(socket){

        	socket.on('privateMessageEmit',function(data){
        	    if(typeof users_list[JSON.parse(data).to] === 'undefined'){
        	        console.log("User Offline Message Queued");
        	    }else{
        	        io.sockets.connected[users_list[JSON.parse(data).to]].emit('privateMessageGet',{"text":JSON.parse(data).message});
        	    }

        	});

            socket.on('groupMessage',function(data){
                socket.broadcast.emit('groupMessage',data);
            });


        	socket.on('disconnect',function(){
        		var index = users_list.indexOf(socket.id);
                if (index !== -1) users_list.splice(index, 1);
        		console.log("user removed " + socket.id);
        	});

        	socket.on('heartbeat',function(data){
        		console.log("beating");
        	});

        	function sendHeartBeat(){
        		setTimeout(sendHeartBeat,20000);
        	    socket.emit('ping', { beat : 1 });
        	}

        	setTimeout(sendHeartBeat,20000);

        }



        var socket = io.connect('http://localhost:3000',{'reconnection': false,'reconnectionDelay': 500,'reconnectionAttempts': 10});


var unique = _.map(_.groupBy(users_list,function(doc){
	        return doc.socket_id;
	    }),function(grouped){
	        return grouped[0];
	    });


var _ = require('underscore');
	    //	    users_list = users_list.filter(function(item){return item.socket_id != socket.id});

	    //        var unique = _.chain(users_list).indexBy("email").values().value();



	    if(fs.existsSync(filePath)){
                fs.readFile(filePath,function(error,data){
                    if(error) throw error;
                    offline_private_message = JSON.parse(data);
                });
            }


            fs.writeFile(filePath,JSON.stringify(offline_private_message),function(error){
                            if(error) throw error;
                        });






25-02-2018 (Database)


var app = require('express')();
var server = require('http').Server(app);
var io = require('socket.io')(server,{
    pingInterval:1000,
    pintTimeout:2000
});

var sqlite3 = require('sqlite3').verbose();
var db = null;
var filePath = __dirname+'/privateMessageQueue.db';


var users_list = [];
var offline_private_message = [];

server.listen(3000,function(){
	console.log("Yep Running");
});

io.on('connect',function(socket){
    createDatabaseIfNotExists();
	allListenersAndEmitters(socket);
});

function allListenersAndEmitters(socket){

	socket.on('privateMessageEmit',function(data){
	    var data = JSON.parse(data);
	    var user = users_list.filter(function(item){return item.email == data.to});
	    if(user.length == 0){
	        insertIntoPrivateMessageQueue(data);
	    }else{
	        io.sockets.connected[user[0].socket_id].emit('privateMessageGet',{"text":data.message});
	        io.sockets.connected[user[0].socket_id].emit("pushMessage",{"message":data.message,"doer":data.from});
	    }

	});

	socket.on('connectedDone',function(data){
	    var user = JSON.parse(data);
        users_list.push(user);
        getAllPendingMessages(user.email);
        if(offline_private_message.length != 0){
            for(var i = 0; i < offline_private_message.length; i++){
                io.sockets.connected[user.socket_id].emit('privateMessageGet',{"text":offline_private_message[i].message});
                io.sockets.connected[user.socket_id].emit("pushMessage",{"message":offline_private_message[i].message,"doer":offline_private_message[i].from});
            }
            offline_private_message = [];
            deleteMessageFromQueue(user.email);
        }
        console.log(users_list);
	});

    socket.on('groupMessage',function(data){
        socket.broadcast.emit('groupMessage',data);
    });


	socket.on('disconnect',function(){
        users_list = users_list.filter(function(item){return item.socket_id != socket.id});
		console.log("user removed " + socket.id);
	});

	socket.emit('connected',{"info":socket.id});
	console.log("User Connected "+socket.id);

	function sendHeartBeat(){
	    socket.emit('ping', { beat : 1 });
		setTimeout(sendHeartBeat,30000);
	}

	setTimeout(sendHeartBeat,30000);
}

function createDatabaseIfNotExists(){
    db = new sqlite3.Database(filePath,sqlite3.OPEN_CREATE | sqlite3.OPEN_READWRITE,(err)=>{
        if(err) console.log(err.stack);
    });
    db.run('CREATE TABLE IF NOT EXISTS pendingMessage(`to` text,`from` text,`message` text)');
    closeDatabaseConnection();
}

function openDatabaseConnection(){
    db = new sqlite3.Database(filePath,sqlite3.OPEN_READWRITE,(err)=>{
        if(err) console.log(err.stack);
    });
}

function getAllPendingMessages(userEmail){
    openDatabaseConnection();
    var query = 'SELECT * FROM pendingMessage WHERE `to` = ?';
    db.all(query , [userEmail] ,(err, row) => {
        if(err) console.log(err.stack);
        var data = {};
        data['to'] = `${row.to}`;
        data['from'] = `${row.from}`;
        data['message'] = `${row.message}`;
        offline_private_message.push(data);
    });
    console.log(offline_private_message);
    closeDatabaseConnection();
}

function closeDatabaseConnection(){
    db.close((err)=>{
        if(err) console.log(err.stack);
    });
}

function insertIntoPrivateMessageQueue(data){
    openDatabaseConnection();
    var query = 'INSERT INTO pendingMessage(`to`,`from`,`message`) VALUES(?,?,?)';
    db.run(query,[data.to,data.from,data.message] , (err) => {
        if(err) console.log(err.stack);
    });
    closeDatabaseConnection();
}

function deleteMessageFromQueue(userEmail){
    openDatabaseConnection();
    var query = 'DELETE FROM pendingMessage where `to` = ?';
    db.run(query, [userEmail] ,(err) =>{
        if(err) console.log(err.stack);
    });
    closeDatabaseConnection();
}



25-02-2018 (Json File)


var app = require('express')();
var server = require('http').Server(app);
var io = require('socket.io')(server,{
    pingInterval:1000,
    pintTimeout:2000
});

var fs = require('fs');
var filePath = __dirname + '/privateMessageQueue.json';


var users_list = [];
var offline_private_message = [];

server.listen(3000,function(){
	console.log("Yep Running");
})

io.on('connect',function(socket){
    if(fs.existsSync(filePath)){
        fs.readFile(filePath,function(error,data){
            if(error) throw error;
            offline_private_message = JSON.parse(data);
            console.log(offline_private_message);
        });
    }
	allListenersAndEmitters(socket);
})


function allListenersAndEmitters(socket){

	socket.on('privateMessageEmit',function(data){
	    var data = JSON.parse(data);
	    var user = users_list.filter(function(item){return item.email == data.to});
	    if(user.length == 0){
	        offline_private_message.push(data);
	        fs.writeFile(filePath,JSON.stringify(offline_private_message),function(error){
                if(error) throw error;
                console.log('Saved');
            });
	    }else{
	        io.sockets.connected[user[0].socket_id].emit('privateMessageGet',{"text":data.message});
	        io.sockets.connected[user[0].socket_id].emit("pushMessage",{"message":data.message,"doer":data.from});
	    }

	});

	socket.on('connectedDone',function(data){
	    var user = JSON.parse(data);
        users_list.push(user);
        var pending_message = offline_private_message.filter(function(item){ return item.to == user.email});
        if(pending_message.length != 0){
            for(var i = 0; i < pending_message.length; i++){
                io.sockets.connected[user.socket_id].emit('privateMessageGet',{"text":pending_message[i].message});
                io.sockets.connected[user.socket_id].emit("pushMessage",{"message":pending_message[i].message,"doer":pending_message[i].from});
            }
            offline_private_message = offline_private_message.filter(function(item) {return item.to != user.email});
            fs.writeFile(filePath,JSON.stringify(offline_private_message),function(error){
                if(error) throw error;
                console.log('Saved');
            });
        }
//        console.log(offline_private_message);
        console.log(users_list);
	});

    socket.on('groupMessage',function(data){
        socket.broadcast.emit('groupMessage',data);
    });


	socket.on('disconnect',function(){
        users_list = users_list.filter(function(item){return item.socket_id != socket.id});
		console.log("user removed " + socket.id);
	});

	socket.emit('connected',{"info":socket.id});
	console.log("User Connected "+socket.id);

	function sendHeartBeat(){
	    socket.emit('ping', { beat : 1 });
		setTimeout(sendHeartBeat,20000);
	}

	setTimeout(sendHeartBeat,20000);

}
